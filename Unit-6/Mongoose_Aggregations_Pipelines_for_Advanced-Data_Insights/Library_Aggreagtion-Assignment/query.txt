// Task 1: List of books borrowed by each borrower
db.loans.aggregate([
  { $lookup: { from: "books", localField: "bookId", foreignField: "_id", as: "bookDetails" } },
  { $group: { _id: "$borrowerId", books: { $push: "$bookDetails.title" } } }
]);

// Task 2: Top 3 most borrowed books
db.loans.aggregate([
  { $group: { _id: "$bookId", borrowCount: { $sum: 1 } } },
  { $sort: { borrowCount: -1 } },
  { $limit: 3 },
  { $lookup: { from: "books", localField: "_id", foreignField: "_id", as: "bookDetails" } },
  { $project: { _id: 0, title: "$bookDetails.title", borrowCount: 1 } }
]);

// Task 3: Borrowerâ€™s loan history (borrowerId = User1)
db.loans.aggregate([
  { $match: { borrowerId: "User1" } },
  { $lookup: { from: "books", localField: "bookId", foreignField: "_id", as: "bookDetails" } },
  { $project: { borrowerId: 1, book: "$bookDetails.title", status: 1, loanDate: 1, returnDate: 1 } }
]);

// Task 4: Borrowers who have borrowed more than 2 books
db.loans.aggregate([
  { $group: { _id: "$borrowerId", borrowCount: { $sum: 1 } } },
  { $match: { borrowCount: { $gt: 2 } } }
]);

// Task 5: Full report of all loans
db.loans.aggregate([
  { $lookup: { from: "books", localField: "bookId", foreignField: "_id", as: "bookDetails" } },
  { $lookup: { from: "borrowers", localField: "borrowerId", foreignField: "_id", as: "borrowerDetails" } },
  { $project: { borrower: "$borrowerDetails.name", book: "$bookDetails.title", status: 1, loanDate: 1, returnDate: 1 } }
]);

// Task 6: Genre-wise count of borrowed books
db.loans.aggregate([
  { $lookup: { from: "books", localField: "bookId", foreignField: "_id", as: "bookDetails" } },
  { $unwind: "$bookDetails" },
  { $group: { _id: "$bookDetails.genre", count: { $sum: 1 } } }
]);

// Task 7: Current borrowed books (status="Borrowed")
db.loans.aggregate([
  { $match: { status: "Borrowed" } },
  { $lookup: { from: "books", localField: "bookId", foreignField: "_id", as: "bookDetails" } },
  { $lookup: { from: "borrowers", localField: "borrowerId", foreignField: "_id", as: "borrowerDetails" } },
  { $project: { book: "$bookDetails.title", borrower: "$borrowerDetails.name", loanDate: 1 } }
]);

// Task 8: Number of returned books per borrower
db.loans.aggregate([
  { $match: { status: "Returned" } },
  { $group: { _id: "$borrowerId", returnedCount: { $sum: 1 } } }
]);

// Task 9: Borrowers who borrowed multiple genres
db.loans.aggregate([
  { $lookup: { from: "books", localField: "bookId", foreignField: "_id", as: "bookDetails" } },
  { $unwind: "$bookDetails" },
  { $group: { _id: "$borrowerId", genres: { $addToSet: "$bookDetails.genre" } } },
  { $match: { $expr: { $gt: [{ $size: "$genres" }, 1] } } }
]);

// Task 10: List borrowers with total borrow count and names
db.loans.aggregate([
  { $group: { _id: "$borrowerId", totalBorrowed: { $sum: 1 } } },
  { $lookup: { from: "borrowers", localField: "_id", foreignField: "_id", as: "borrowerDetails" } },
  { $project: { borrowerName: "$borrowerDetails.name", totalBorrowed: 1 } }
]);